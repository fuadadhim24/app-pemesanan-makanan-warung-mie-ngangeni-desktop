/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package form;

import com.mysql.cj.jdbc.Blob;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import javax.smartcardio.*;
import javax.swing.Timer;

/**
 *
 * @author fuada
 */
public class Login1 extends javax.swing.JFrame {

    /**
     * Creates new form Login1
     */
     // Helper method to convert bytes to a hexadecimal string
    

    void sembunyikanbtn(){
        btnsembunyikanpassword.setVisible(false);
        iconeye.setVisible(false);
        btnlihatpassword.setVisible(true);
        
    }
    public Login1() {
        initComponents();
        sembunyikanbtn();
        popupPemindaianGagal.setVisible(false);
        popupPemindaianBerhasil.setVisible(false);
        popupScanWait.setVisible(false);
        btnclosepopup.setVisible(false);
        scannik.setVisible(false);
        scannik.setFocusable(false);
        btnclosepopup.setVisible(false);
    }
    public boolean validatesignin(){
       String name = username.getText();
    
       if(name.equals("")){
           JOptionPane.showMessageDialog(this, "masukkan username");
           return false;
       }else{
       return true;
    }
   }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupPemindaianBerhasil = new javax.swing.JLabel();
        popupPemindaianGagal = new javax.swing.JLabel();
        scannik = new javax.swing.JTextField();
        popupScanWait = new javax.swing.JLabel();
        btnclosepopup = new javax.swing.JPanel();
        closeform = new javax.swing.JLabel();
        btnlupapassword = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        btnlogin = new javax.swing.JPanel();
        btnscan = new javax.swing.JPanel();
        iconeye = new javax.swing.JLabel();
        btnsembunyikanpassword = new javax.swing.JPanel();
        btnlihatpassword = new javax.swing.JPanel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        popupPemindaianBerhasil.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/login/pemindaian berhasil.png"))); // NOI18N
        getContentPane().add(popupPemindaianBerhasil, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 548, -1, -1));

        popupPemindaianGagal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/login/pemindaianGagal.png"))); // NOI18N
        getContentPane().add(popupPemindaianGagal, new org.netbeans.lib.awtextra.AbsoluteConstraints(328, 548, -1, -1));

        scannik.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        scannik.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        scannik.setHighlighter(null);
        scannik.setSelectionColor(new java.awt.Color(255, 255, 255));
        scannik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scannikActionPerformed(evt);
            }
        });
        getContentPane().add(scannik, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 490, 220, -1));

        popupScanWait.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/login/menunggu scan.png"))); // NOI18N
        getContentPane().add(popupScanWait, new org.netbeans.lib.awtextra.AbsoluteConstraints(-90, -270, -1, -1));

        btnclosepopup.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnclosepopup.setOpaque(false);
        btnclosepopup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnclosepopupMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout btnclosepopupLayout = new javax.swing.GroupLayout(btnclosepopup);
        btnclosepopup.setLayout(btnclosepopupLayout);
        btnclosepopupLayout.setHorizontalGroup(
            btnclosepopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );
        btnclosepopupLayout.setVerticalGroup(
            btnclosepopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );

        getContentPane().add(btnclosepopup, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 110, 70, 70));

        closeform.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        closeform.setText("X");
        closeform.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeform.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeformMouseClicked(evt);
            }
        });
        getContentPane().add(closeform, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 50, -1, -1));

        btnlupapassword.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnlupapassword.setForeground(new java.awt.Color(0, 51, 153));
        btnlupapassword.setText("Lupa password");
        btnlupapassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnlupapasswordMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnlupapasswordMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnlupapasswordMouseExited(evt);
            }
        });
        getContentPane().add(btnlupapassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(758, 520, -1, -1));

        username.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        username.setForeground(new java.awt.Color(175, 0, 0));
        username.setBorder(null);
        username.setCaretColor(new java.awt.Color(175, 0, 0));
        username.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                usernameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                usernameFocusLost(evt);
            }
        });
        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameActionPerformed(evt);
            }
        });
        username.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                usernameKeyPressed(evt);
            }
        });
        getContentPane().add(username, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 370, 300, 40));

        password.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        password.setForeground(new java.awt.Color(175, 0, 0));
        password.setText("***************");
        password.setBorder(null);
        password.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordFocusLost(evt);
            }
        });
        password.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                passwordMouseClicked(evt);
            }
        });
        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });
        getContentPane().add(password, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 460, 270, 50));

        btnlogin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnlogin.setOpaque(false);
        btnlogin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnloginMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout btnloginLayout = new javax.swing.GroupLayout(btnlogin);
        btnlogin.setLayout(btnloginLayout);
        btnloginLayout.setHorizontalGroup(
            btnloginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 184, Short.MAX_VALUE)
        );
        btnloginLayout.setVerticalGroup(
            btnloginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        getContentPane().add(btnlogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 542, 184, 45));

        btnscan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnscan.setOpaque(false);
        btnscan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnscanMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout btnscanLayout = new javax.swing.GroupLayout(btnscan);
        btnscan.setLayout(btnscanLayout);
        btnscanLayout.setHorizontalGroup(
            btnscanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 184, Short.MAX_VALUE)
        );
        btnscanLayout.setVerticalGroup(
            btnscanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 43, Short.MAX_VALUE)
        );

        getContentPane().add(btnscan, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 614, 184, 43));

        iconeye.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/eye.png"))); // NOI18N
        getContentPane().add(iconeye, new org.netbeans.lib.awtextra.AbsoluteConstraints(761, 408, -1, -1));

        btnsembunyikanpassword.setBackground(new java.awt.Color(255, 255, 255));
        btnsembunyikanpassword.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnsembunyikanpassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnsembunyikanpasswordMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout btnsembunyikanpasswordLayout = new javax.swing.GroupLayout(btnsembunyikanpassword);
        btnsembunyikanpassword.setLayout(btnsembunyikanpasswordLayout);
        btnsembunyikanpasswordLayout.setHorizontalGroup(
            btnsembunyikanpasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        btnsembunyikanpasswordLayout.setVerticalGroup(
            btnsembunyikanpasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );

        getContentPane().add(btnsembunyikanpassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 470, 40, 34));

        btnlihatpassword.setOpaque(false);
        btnlihatpassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnlihatpasswordMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout btnlihatpasswordLayout = new javax.swing.GroupLayout(btnlihatpassword);
        btnlihatpassword.setLayout(btnlihatpasswordLayout);
        btnlihatpasswordLayout.setHorizontalGroup(
            btnlihatpasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        btnlihatpasswordLayout.setVerticalGroup(
            btnlihatpasswordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        getContentPane().add(btnlihatpassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 460, 40, 50));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/login/login.png"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        setSize(new java.awt.Dimension(1366, 768));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameActionPerformed

    private void passwordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passwordMouseClicked
        password.setText(null);
    }//GEN-LAST:event_passwordMouseClicked

    private void btnloginMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnloginMouseClicked
      if (password.getText().equals("*****")) {
        password.setText(null);
    }
    if (validatesignin() == true) {
        try {
            System.out.println("Chechk 1 berhasil");
            String sql = "SELECT * FROM akun JOIN detail_akun ON akun.`nik/id` = detail_akun.`nik/id` WHERE akun.username = ?";
            java.sql.Connection conn = (Connection) Config.configDB();
            java.sql.PreparedStatement pst = conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            pst.setString(1, username.getText());
            java.sql.ResultSet rs = pst.executeQuery();
            if(!rs.next()){
                JOptionPane.showMessageDialog(null, "Username tidak terdaftar");
            }else{
                String storedPassword = rs.getString("password");
                String userRole = rs.getString("hak_akses");
                System.out.println("check 2 berhasil");
                
                if (storedPassword == null || storedPassword.isEmpty()) {
                    com.mysql.cj.jdbc.Blob gambarBlob = (com.mysql.cj.jdbc.Blob) rs.getBlob("foto");
                    System.out.println("check 3 berhasil");
                    if (gambarBlob != null) {
                        System.out.println("check 4 berhasil");
                        int ukuran = (int) gambarBlob.length();

                        int targetWidth = 66;  // Lebar yang diinginkan
                        int targetHeight = 66;  // Tinggi yang diinginkan

                        ImageIcon ic = new ImageIcon(gambarBlob.getBytes(1, ukuran));
                        Image image = ic.getImage();

                        // Mendapatkan lebar dan tinggi asli foto
                        int originalWidth = image.getWidth(null);
                        int originalHeight = image.getHeight(null);

                        // Menghitung aspek rasio gambar asli
                        double aspectRatio = (double) originalWidth / originalHeight;

                        // Menghitung ukuran yang sesuai dengan aspek rasio yang diinginkan
                        int scaledWidth, scaledHeight;
                        if (aspectRatio > 1) {  // Gambar lebih lebar
                            scaledWidth = targetWidth;
                            scaledHeight = (int) (targetWidth / aspectRatio);
                        } else {  // Gambar lebih tinggi atau persegi
                            scaledWidth = (int) (targetHeight * aspectRatio);
                            scaledHeight = targetHeight;
                        }

                        // Mengubah ukuran gambar tanpa memotong
                        Image scaledImage = image.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_DEFAULT);

                        // Mengubah Image menjadi ImageIcon
                        ImageIcon icon = new ImageIcon(scaledImage);
                        
                    
                        akunBaru.username.setText(rs.getString(2)+"!");
                        akunBaru.job.setText(rs.getString(4));
                        AdminPenjualan.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        AdminKaryawan.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        AdminMenu.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        AdminPesanan.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        koki.labelnama.setText(rs.getString(6));
                        koki.displaygambarakun.setIcon(icon);
                        waiter.labelnama.setText(rs.getString(6));
                        waiter.displaygambarakun.setIcon(icon);
                        new akunBaru().setVisible(true);
                        this.dispose();
                        System.out.println("check 5 berhasil");
                } else if(gambarBlob == null){
                    JOptionPane.showMessageDialog(this, "Gambar Tidak terdeteksi harap hubungi Admin");
                }
            }else if (password.getText().equals(storedPassword)) {
                    // Set gambar ke foto profil
                    com.mysql.cj.jdbc.Blob gambarBlob2 = (com.mysql.cj.jdbc.Blob) rs.getBlob("foto");
                    if (gambarBlob2 != null) {
                        int ukuran = (int) gambarBlob2.length();

                        int targetWidth = 66;  // Lebar yang diinginkan
                        int targetHeight = 66;  // Tinggi yang diinginkan

                        ImageIcon ic = new ImageIcon(gambarBlob2.getBytes(1, ukuran));
                        Image image = ic.getImage();

                        // Mendapatkan lebar dan tinggi asli foto
                        int originalWidth = image.getWidth(null);
                        int originalHeight = image.getHeight(null);

                        // Menghitung aspek rasio gambar asli
                        double aspectRatio = (double) originalWidth / originalHeight;

                        // Menghitung ukuran yang sesuai dengan aspek rasio yang diinginkan
                        int scaledWidth, scaledHeight;
                        if (aspectRatio > 1) {  // Gambar lebih lebar
                            scaledWidth = targetWidth;
                            scaledHeight = (int) (targetWidth / aspectRatio);
                        } else {  // Gambar lebih tinggi atau persegi
                            scaledWidth = (int) (targetHeight * aspectRatio);
                            scaledHeight = targetHeight;
                        }

                        // Mengubah ukuran gambar tanpa memotong
                        Image scaledImage = image.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_DEFAULT);

                        // Mengubah Image menjadi ImageIcon
                        ImageIcon icon = new ImageIcon(scaledImage);

                        // Set the labelnama in other classes
                        AdminPenjualan.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        AdminKaryawan.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        AdminMenu.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        AdminPesanan.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        koki.labelnama.setText(rs.getString(6));
                        koki.displaygambarakun.setIcon(icon);
                        waiter.labelnama.setText(rs.getString(6));
                        waiter.displaygambarakun.setIcon(icon);
                    }
                    
                    if (userRole.equals("ADMIN")) {
                        JOptionPane.showMessageDialog(null, "Berhasil login");                      
                        new AdminPenjualan().setVisible(true);
                        this.dispose();
                    } else if (userRole.equals("KOKI")) {
                        JOptionPane.showMessageDialog(null, "Berhasil login");
                        new koki().setVisible(true);
                        this.dispose();
                    } else if (userRole.equals("KASIR")) {
                        JOptionPane.showMessageDialog(null, "Berhasil login");
                        new kasir().setVisible(true);
                        this.dispose();
                    } else if (userRole.equals("WAITER")) {
                        JOptionPane.showMessageDialog(null, "Berhasil login");
                        new waiter().setVisible(true);
                        this.dispose();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Username atau password salah");
                }
                
        }
    }   catch (SQLException ex) {
            Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchFieldException ex) {
            Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
        }}
    }//GEN-LAST:event_btnloginMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        for(double i = 0.0; i<=1; i = i+0.1){
            String val = i+"";
            float f = Float.valueOf(val);
            this.setOpacity(f);
            try{
                Thread.sleep(20);
            }catch(Exception e){
                
            }
        }
        
    }//GEN-LAST:event_formWindowOpened

    private void closeformMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeformMouseClicked
        new MainDisplay().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_closeformMouseClicked

    private void passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordActionPerformed
        
    }//GEN-LAST:event_passwordActionPerformed

    private void usernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameKeyPressed
        
    }//GEN-LAST:event_usernameKeyPressed

    private void passwordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFocusGained
        password.setForeground(Color.BLUE);
        password.setText(null);
    }//GEN-LAST:event_passwordFocusGained

    private void usernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameFocusGained
        username.setForeground(Color.BLUE);
    }//GEN-LAST:event_usernameFocusGained

    private void usernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameFocusLost
        username.setForeground(Color.red); 
        
    }//GEN-LAST:event_usernameFocusLost

    private void passwordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFocusLost
        password.setForeground(Color.red); 
        if (password.getText() == null || password.getText().isEmpty()) {
                
                password.setText("***************");
            }
    }//GEN-LAST:event_passwordFocusLost

    private void btnlihatpasswordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnlihatpasswordMouseClicked
        password.setEchoChar((char) 0);
        btnlihatpassword.setVisible(false);
        btnsembunyikanpassword.setVisible(true);
        iconeye.setVisible(true);
    }//GEN-LAST:event_btnlihatpasswordMouseClicked

    private void btnsembunyikanpasswordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnsembunyikanpasswordMouseClicked
        password.setEchoChar('*');
        sembunyikanbtn();
    }//GEN-LAST:event_btnsembunyikanpasswordMouseClicked

    private void btnlupapasswordMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnlupapasswordMouseEntered
        btnlupapassword.setForeground(new Color(0, 0, 153));
    }//GEN-LAST:event_btnlupapasswordMouseEntered

    private void btnlupapasswordMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnlupapasswordMouseExited
        btnlupapassword.setForeground(new Color(0, 51, 153));
    }//GEN-LAST:event_btnlupapasswordMouseExited

    private void btnlupapasswordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnlupapasswordMouseClicked
        this.setVisible(false);
        new forgotpassword1().setVisible(true);
    }//GEN-LAST:event_btnlupapasswordMouseClicked

    private void btnscanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnscanMouseClicked
        popupScanWait.setVisible(true);
        btnclosepopup.setVisible(true);
        scannik.setVisible(true);
        scannik.setFocusable(true);
        scannik.requestFocus(true);
    }//GEN-LAST:event_btnscanMouseClicked

    private void scannikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scannikActionPerformed
        try {
            String sql = "SELECT * FROM akun JOIN detail_akun ON akun.`nik/id` = detail_akun.`nik/id` WHERE akun.`nik/id` = ?";
            java.sql.Connection conn = (Connection) Config.configDB();
            java.sql.PreparedStatement pst = conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            pst.setString(1, scannik.getText());
            java.sql.ResultSet rs = pst.executeQuery();
            System.out.println(scannik.getText());

            if (rs.next()) {
                String storedPassword = rs.getString("password");
                String userRole = rs.getString("hak_akses");
                
                if (storedPassword == null || storedPassword.isEmpty()) {
                    com.mysql.cj.jdbc.Blob gambarBlob = (com.mysql.cj.jdbc.Blob) rs.getBlob("foto");
                    System.out.println("check 3 berhasil");
                    if (gambarBlob != null) {
                        System.out.println("check 4 berhasil");
                        int ukuran = (int) gambarBlob.length();

                        int targetWidth = 66;  // Lebar yang diinginkan
                        int targetHeight = 66;  // Tinggi yang diinginkan

                        ImageIcon ic = new ImageIcon(gambarBlob.getBytes(1, ukuran));
                        Image image = ic.getImage();

                        // Mendapatkan lebar dan tinggi asli foto
                        int originalWidth = image.getWidth(null);
                        int originalHeight = image.getHeight(null);

                        // Menghitung aspek rasio gambar asli
                        double aspectRatio = (double) originalWidth / originalHeight;

                        // Menghitung ukuran yang sesuai dengan aspek rasio yang diinginkan
                        int scaledWidth, scaledHeight;
                        if (aspectRatio > 1) {  // Gambar lebih lebar
                            scaledWidth = targetWidth;
                            scaledHeight = (int) (targetWidth / aspectRatio);
                        } else {  // Gambar lebih tinggi atau persegi
                            scaledWidth = (int) (targetHeight * aspectRatio);
                            scaledHeight = targetHeight;
                        }

                        // Mengubah ukuran gambar tanpa memotong
                        Image scaledImage = image.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_DEFAULT);

                        // Mengubah Image menjadi ImageIcon
                        ImageIcon icon = new ImageIcon(scaledImage);
                        
                        
                        
                        popupPemindaianBerhasil.setVisible(true);
                        System.out.println("check 5 berhasil");
                        akunBaru.username.setText(rs.getString(2)+"!");
                        akunBaru.job.setText(rs.getString(4));
                        AdminPenjualan.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        AdminKaryawan.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        AdminMenu.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        AdminPesanan.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        koki.labelnama.setText(rs.getString(6));
                        koki.displaygambarakun.setIcon(icon);
                        waiter.labelnama.setText(rs.getString(6));
                        waiter.displaygambarakun.setIcon(icon);
                        System.out.println("check 6 berhasil");
                        
                        Thread.sleep(2000); // Introduce a 2-second delay
                        new akunBaru().setVisible(true);
                        System.out.println("check 7 berhasil");
                        this.dispose();
                        System.out.println("check 8 berhasil");
                } 
            }else if (storedPassword != null) {
                    // Set gambar ke foto profil
                    com.mysql.cj.jdbc.Blob gambarBlob2 = (com.mysql.cj.jdbc.Blob) rs.getBlob("foto");
                    if (gambarBlob2 != null) {
                        int ukuran = (int) gambarBlob2.length();

                        int targetWidth = 66;  // Lebar yang diinginkan
                        int targetHeight = 66;  // Tinggi yang diinginkan

                        ImageIcon ic = new ImageIcon(gambarBlob2.getBytes(1, ukuran));
                        Image image = ic.getImage();

                        // Mendapatkan lebar dan tinggi asli foto
                        int originalWidth = image.getWidth(null);
                        int originalHeight = image.getHeight(null);
                        
                        // Menghitung aspek rasio gambar asli
                        double aspectRatio = (double) originalWidth / originalHeight;

                        // Menghitung ukuran yang sesuai dengan aspek rasio yang diinginkan
                        int scaledWidth, scaledHeight;
                        if (aspectRatio > 1) {  // Gambar lebih lebar
                            scaledWidth = targetWidth;
                            scaledHeight = (int) (targetWidth / aspectRatio);
                        } else {  // Gambar lebih tinggi atau persegi
                            scaledWidth = (int) (targetHeight * aspectRatio);
                            scaledHeight = targetHeight;
                        }

                        // Mengubah ukuran gambar tanpa memotong
                        Image scaledImage = image.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_DEFAULT);

                        // Mengubah Image menjadi ImageIcon
                        ImageIcon icon = new ImageIcon(scaledImage);

                        // Set the labelnama in other classes
                        AdminPenjualan.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        AdminKaryawan.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        AdminMenu.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        AdminPesanan.labelnama1.setText("Selamat Datang, " + rs.getString(6));
                        koki.labelnama.setText(rs.getString(6));
                        koki.displaygambarakun.setIcon(icon);
                        waiter.labelnama.setText(rs.getString(6));
                        waiter.displaygambarakun.setIcon(icon);
                        
                        popupPemindaianBerhasil.setVisible(true);
                    }
                    System.out.println(userRole);
                    // Timer to execute the if statement after 2 seconds
                    Timer timer = new Timer(2000, new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            if (userRole.equals("ADMIN")) {
                                new AdminPenjualan().setVisible(true);
                                dispose();
                            } else if (userRole.equals("KOKI")) {
                                try {
                                    new koki().setVisible(true);
                                } catch (SQLException ex) {
                                    Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (NoSuchFieldException ex) {
                                    Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (IllegalArgumentException ex) {
                                    Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (IllegalAccessException ex) {
                                    Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                dispose();
                            } else if (userRole.equals("KASIR")) {
                                new kasir().setVisible(true);
                                dispose();
                            } else if (userRole.equals("WAITER")) {
                                try {
                                    new waiter().setVisible(true);
                                } catch (SQLException ex) {
                                    Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (NoSuchFieldException ex) {
                                    Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (IllegalArgumentException ex) {
                                    Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (IllegalAccessException ex) {
                                    Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                dispose();
                            }
                        }
                    });
                    timer.setRepeats(false);
                    timer.start();
                } else {

                    popupPemindaianGagal.setVisible(true);
                    // Timer to hide the popup after 2 seconds
                    Timer timer = new Timer(2000, new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            popupPemindaianGagal.setVisible(false);
                        }
                    });
                    timer.setRepeats(false); // Set to not repeat the action
                    timer.start();
                }
        }
    }   catch (SQLException ex) {
            Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(Login1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_scannikActionPerformed

    private void btnclosepopupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnclosepopupMouseClicked
        popupScanWait.setVisible(false);
        scannik.setVisible(false);
    }//GEN-LAST:event_btnclosepopupMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JPanel btnclosepopup;
    private javax.swing.JPanel btnlihatpassword;
    private javax.swing.JPanel btnlogin;
    private javax.swing.JLabel btnlupapassword;
    private javax.swing.JPanel btnscan;
    private javax.swing.JPanel btnsembunyikanpassword;
    private javax.swing.JLabel closeform;
    private javax.swing.JLabel iconeye;
    private javax.swing.JPasswordField password;
    private javax.swing.JLabel popupPemindaianBerhasil;
    private javax.swing.JLabel popupPemindaianGagal;
    private javax.swing.JLabel popupScanWait;
    private javax.swing.JTextField scannik;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
